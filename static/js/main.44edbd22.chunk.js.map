{"version":3,"sources":["pages/MainLayout.js","components/Connectors.ts","App.js","components/Hooks.ts","registerServiceWorker.js","index.js","svg/github.svg","svg/reddit.svg","svg/discord.svg","svg/twitter.svg"],"names":["Redirect","props","history","useHistory","to","push","MainLayout","exact","path","className","injected","InjectedConnector","supportedChainIds","App","Web3","utils","toBN","acct","size","context","useWeb3React","connector","chainId","account","activate","active","error","network","getNetwork","networkName","name","prettyAddress","substring","length","React","useState","activatingConnector","setActivatingConnector","useEffect","undefined","suppress","ethereum","window","on","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","then","catch","useEagerConnect","contractsLoaded","setContractsLoaded","numBatches","setNumBatches","bottle","setBottleContract","bottleWrapper","setBottleWrapperContract","a","require","setupContracts","setupBalances","batchCount","allEvents","e","err","connectInjectedWallet","useCallback","activating","connected","appStatus","activeClassName","data-tip","data-for","id","arrowColor","place","style","flexGrow","connectWallet","user","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","getLibrary","provider","library","Web3Provider","pollingInterval","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.44edbd22.chunk.js","sourcesContent":["import React from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\n\n// import About from \"./About.js\";\n\nconst Redirect = (props) => {\n  let history = useHistory();\n  const {to} = props;\n  history.push(to);\n  return <></>;\n}\n\nconst MainLayout = (props) => {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <div className=\"Home-main\">\n          <div className=\"jumbotron\">coming soon</div>\n        </div>\n      </Route>\n      <Route path=\"*\">\n        <Redirect to=\"/\" />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default MainLayout;","import { InjectedConnector } from '@web3-react/injected-connector'\n\nconst POLLING_INTERVAL = 12000\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","/*\n *  Entry-point for the FuBuFi frontend.\n */\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Web3 from \"web3\";\n\nimport MainLayout from \"./pages/MainLayout.js\";\nimport {Footer} from \"./components/Footer.js\";\n\nimport { injected } from './components/Connectors.ts';\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { useEagerConnect, useInactiveListener } from \"./components/Hooks.ts\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nimport \"./App.css\";\nimport { getNetwork } from \"@ethersproject/networks\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst toBN = Web3.utils.toBN;\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst prettyfyAddress = (acct, size) => {\n  if (!acct) return \"INVALID\";\n  const s = acct.substring(0, 2+size);\n  const e = acct.substring(acct.length-4, acct.length);\n  return s + \"...\" + e;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst App = (props) => {\n  const context = useWeb3React();\n  const { connector, chainId, account, activate, active, error } = context;\n\n  const network = getNetwork(chainId);\n  const networkName = (network && network.name) || \"unknown\";\n  const prettyAddress = prettyfyAddress(account, 4);\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n  const [contractsLoaded, setContractsLoaded] = useState(false);\n  const [numBatches, setNumBatches] = useState(0);\n\n  const [bottle, setBottleContract] = useState(undefined);\n  const [bottleWrapper, setBottleWrapperContract] = useState(undefined);\n\n  // If the chain changes, update the UI by taking over the contractsLoaded boolean.\n  useEffect(() => {\n    setContractsLoaded(false);\n  }, [chainId])\n\n  // If the chain changes, update all the contract ABIs.\n  useEffect(() => {\n    async function setupContracts() {\n      const contract = require(\"@truffle/contract\");\n\n      // let BottleABI = contract(_Bottle);\n      // let BottleWrapperABI = contract(_BottleWrapper);\n\n      // BottleABI.setProvider(window.web3.currentProvider);\n      // BottleWrapperABI.setProvider(window.web3.currentProvider);\n\n      // const cBottle = await BottleABI.deployed();\n      // const cBottleWrapper = await BottleWrapperABI.deployed();\n\n      // setBottleContract(cBottle);\n      // setBottleWrapperContract(cBottleWrapper);\n      setContractsLoaded(true);\n    }\n    setupContracts();\n  }, [chainId, setBottleWrapperContract, setBottleContract, setContractsLoaded]);\n\n  // If the chian or the user or the contracts change, update the balances and\n  // the scene data.\n  useEffect(() => {\n    if (!(bottle && account)) return;\n\n    const setupBalances = async () => {\n      setNumBatches(await bottle.batchCount());\n    }\n\n    bottle.allEvents()\n      .on(\"data\", (e) => {\n        console.log(e);\n      })\n      .on(\"error\", (err) => {\n        console.log(\"error\", err);\n      });\n\n    setupBalances()\n      .catch(console.error);\n\n  }, [account, bottle, chainId, setNumBatches])\n\n  // Callback to force wallet connection.\n  const connectInjectedWallet = useCallback(() => {\n    setActivatingConnector(injected)\n    activate(injected);\n  }, [setActivatingConnector, activate]);\n\n  // Activating - the wallet is attempting to open.\n  const activating = injected === activatingConnector;\n\n  // Connected - the account is connected.\n  const connected = injected === connector;\n  const appStatus = !connected ? \"not connected\" : (networkName+\" : \"+prettyAddress);\n\n  ////////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"App\">\n\n      <div className=\"App-header\">\n        <NavLink exact activeClassName=\"isActive\" to=\"/\" data-tip data-for=\"networkInfoTooltip\">\n          FubuFi\n        </NavLink>\n        {/* <NavLink exact activeClassName=\"isActive\" to=\"/about\">FAQ</NavLink> */}\n        <div className=\"grow\"></div>\n        <ReactTooltip id=\"networkInfoTooltip\" arrowColor=\"var(--color-font)\" place=\"bottom\">\n          <p>{appStatus}</p>\n        </ReactTooltip>\n      </div>\n\n      <div className=\"App-body\">\n        <div className=\"App-scroll\">\n          <div style={{flexGrow: 1}}>\n            <MainLayout\n              connectWallet={connectInjectedWallet}\n              connected={connected} activating={activating} active={active}\n              numBatches={numBatches} contractsLoaded={contractsLoaded}\n              user={account} chainId={chainId}\n              bottle={bottle} bottleWrapper={bottleWrapper}\n              error={error}\n            />\n          </div>\n          {/* <Footer style={{marginBottom: \"5px\"}}/> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './Connectors';\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nReactDOM.render((\n  <HashRouter>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  </HashRouter>\n), document.getElementById(\"root\"));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/github.31145889.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.1dee27c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.e2217522.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.3ad6654a.svg\";"],"sourceRoot":""}